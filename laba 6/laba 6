# Тема 6. 
Отчет по Теме #6 выполнил(а):
- Захаревич Анна Антоновна
- ИВТ-22-1

| Задание | Лаб_раб | Сам_раб |
| ------ | ------ | ------ |
| Задание 1 | + | + |
| Задание 2 | + | + |
| Задание 3 | + | + |
| Задание 4 | + | + |
| Задание 5 | + | + |


знак "+" - задание выполнено; знак "-" - задание не выполнено;

Работу проверили:
- к.э.н., доцент Панов М.А.

## Лабораторная работа №1
### В школе, где вы учились, узнали, что вы крутой программист и попросили написать программу для учителей, которая будет при вводе кабинета писать для него доступ и статус, занят кабинет или нет. При написании программы необходимо использовать словарь (dict), который на вход получает номер кабинета, а выводит необходимую информацию. Если кабинета, который вы ввели, нет в словаре, то в консоль в виде значения ключа нужно вывести “None” и в виде статуса вывести “False”.
По большому счету, написав данную программу, мы с вами научились заменять иногда громоздкую конструкцию if/elif/else. Поскольку здесь функционал словаря полностью повторяет функциональные условия, но при этом использование словарей в более сложных программах есть намного больше возможностей реализации.


```python

request = int(input('Введите номер кабинета: '))
dictionary = {
    101: {'key': 1234, 'access': True},
    102: {'key': 8954, 'access': True},
    103: {'key': 9534, 'access': False},
    None: {'key': None, 'access': False},
}

response = dictionary.get(request)
key = response.get('key')
access = response.get('access')
print(key, access)


```
### Результат.
![Меню](https://github.com/AnnaZakharevich/-/blob/main/laba%206/pic/l1.png)

## Выводы

В данном коде выводятся три строки с использованием функции `print()`. Каждая строка содержит разные значения

## Лабораторная работа №2
### Алексей решил создать самый большой словарь в мире. Для этого он придумал функцию dict_maker (**kwargs), которая принимает неограниченное количество параметров «ключ: значение» и обновляет созданный им словарь my_dict, состоящий всего из одного элемента «first» со значением «so easy». Помогите Алексею создать данную функцию.
Ниже на скриншоте мы использовали встроенный модуль pprint, который выводит большие объемы информации более понятно для восприятия человеческим глазом. Иногда очень удобно использовать данную возможность Python.


```python

from pprint import pprint

my_dict = {'first': 'so easy'}

# 2 использования
def dict_maker(**kwargs):
    my_dict.update(**kwargs)

dict_maker(a1=1, a2=20, a3=54, a4=13)
dict_maker(name='Михаил', age=31, weight=70, eyes_color='blue')
pprint(my_dict)


```


### Результат.
![Меню](https://github.com/AnnaZakharevich/-/blob/main/laba%206/pic/l2.png)

## Выводы

В данном коде производится вычисление и вывод значений внутри операции print

## Лабораторная работа №3
### Для решения некоторых задач бывает необходимо разложить строку на отдельные символы. Мы знаем, что это можно сделать при помощи метода split(), у которого более гибкая настройка для разделения. Однако, если нам нужно построчно разделить строку без всяких условий, то для этого мы можем использовать кортежи (tuple). Для этого напишем любую строку, которую будем делить и "обернем" её в tuple, и дальше мы можем как нам угодно с ней работать, например, сделать её списком (тогда получится полный аналог split()) или же работать с ним дальше, как с кортежем.


```python

input_string = 'HelloWorld'
result = tuple(input_string)
print(result)
print(list(result))


```
### Результат.
![Меню](https://github.com/AnnaZakharevich/-/blob/main/laba%206/pic/l3.png)


## Выводы

В этом коде выводится сообщение "Привет, Мир!" тремя различными способами.
  
## Лабораторная работа №4
### Вовочка решил написать крутую функцию, которая будет выводить имя, возраст и место работы, но при этом на вход этой функции будет поступать кортеж. Помогите Вовочке написать эту программу.

```python

def personal_info(name, age, company='unnamed'):
    print(f"Имя: {name}\nВозраст: {age}\nКомпания: {company}")

tom = ("Григорий", 22)
personal_info(*tom)

bob = ("Георгий", 41, "Yandex")
personal_info(*bob)

```
### Результат.
![Меню](https://github.com/AnnaZakharevich/-/blob/main/laba%206/pic/l4.png)


## Выводы

В данном коде наглядно показана трансформация типов перменных из одного типа в другой.

## Лабораторная работа №5
### Для сопровождения первых лиц государства X нужен кортеж, но никто не может определиться с порядком машин, поэтому вам нужно написать функцию, которая будет сортировать кортеж, состоящий из целых чисел по возрастанию, и возвращает его. Если хотя бы один элемент не является целым числом, то функция возвращает исходный кортеж.


```python

def tuple_sort(tpl):
    for elm in tpl:
        if not isinstance(elm, int):
            return tpl
    return tuple(sorted(tpl))

if __name__ == '__main__':
    print(tuple_sort((5, 5, 3, 1, 9)))
    print(tuple_sort((5, 5, 2.1, '1', 9)))


```
### Результат.
![Меню](https://github.com/AnnaZakharevich/-/blob/main/laba%206/pic/l5.png)


## Выводы

Этот код выводит на экран значения трех переменных, заданных пользователем с клавиатурыэл

 

## Самостоятельная работа №1
### При создании сайта у вас возникла потребность обрабатывать данные пользователя в странной форме, а потом переводить их в нужные вам форматы. Вы хотите принимать от пользователя последовательность чисел, разделенных пробелом, а после переформатировать эти данные в список и кортеж. Реализуйте вашу задумку. Для получения начальных данных используйте input.
Результатом программы будет выведенный список и кортеж из начальных данных.

```python

# Получаем ввод от пользователя
user_input = input("Введите последовательность чисел, разделенных пробелами: ")

# Разбиваем строку по пробелам и преобразуем в список чисел
numbers_list = [float(num) for num in user_input.split()]

# Преобразуем список в кортеж
numbers_tuple = tuple(numbers_list)

# Выводим результаты
print("Список:", numbers_list)
print("Кортеж:", numbers_tuple)


```
### Результат.
![Меню](https://github.com/AnnaZakharevich/-/blob/main/laba%206/pic/s1.png)


## Выводы

В этом коде используется функция bool, для вывода булевого значения из числа
  
## Самостоятельная работа №2
### Николай знает, что кортежи являются неизменяемыми, но он очень упрямый и всегда хочет доказать, что он прав. Студент решил создать функцию, которая будет удалять первое появление определенного элемента из кортежа по значению и возвращать кортеж без него. Попробуйте повторить шедевр не признающего авторитеты начинающего программиста. Но учтите, что Николай не всегда уверен в наличии элемента в кортеже (в этом случае кортеж вернется функцией в исходном виде).
Входные данные:
(1, 2, 3), 1)
(1, 2, 3, 1, 2, 3, 4, 5, 2, 3, 4, 2, 4, 2), 3)
(2,4, 6, 6, 4, 2), 9)
Ожидаемый результат:
(2, 3)
(1, 2, 1, 2, 3, 4, 5, 2, 3, 4, 2, 4, 2)
(2, 4, 6, 6, 4, 2)


```python

def remove_first_occurrence(t, value):
    # Преобразуем кортеж в список для изменения
    temp_list = list(t)
    
    try:
        # Находим индекс первого вхождения элемента
        index = temp_list.index(value)
        # Удаляем элемент из списка
        del temp_list[index]
    except ValueError:
        # Если элемент не найден, ничего не меняем
        pass
    
    # Возвращаем список обратно в кортеж
    return tuple(temp_list)

# Примеры использования функции
print(remove_first_occurrence((1, 2, 3), 1))  # Ожидается (2, 3)
print(remove_first_occurrence((1, 2, 3, 1, 2, 3, 4, 5, 2, 3, 4, 2, 4, 2), 3))  # Ожидается (1, 2, 1, 2, 3, 4, 5, 2, 3, 4, 2, 4, 2)
print(remove_first_occurrence((2, 4, 6, 6, 4, 2), 9))  # Ожидается (2, 4, 6, 6, 4, 2)


```
### Результат.
![Меню](https://github.com/AnnaZakharevich/-/blob/main/laba%206/pic/s2.png)

## Выводы

В данном коде реализована возможность присвоения значений нескольким переменным в одной строке
  
## Самостоятельная работа №3
### Ребята поспорили кто из них одним нажатием на numpad наберет больше повторяющихся цифр, но не понимают, как узнать победителя. Вам им нужно в этом помочь. Дана строка в виде случайной последовательности чисел от 0 до 9 (длина строки минимум 15 символов). Г ребуется создать словарь, который в качестве ключей будет принимать данные числа (т. е. ключи будут типом int), а в качестве значений - количество этих чисел в имеющейся последовательности. Для построения словаря создайте
функцию, принимающую строку из цифр. Функция должна возвратить словарь из 3-х самых часто встречаемых чисел, также эти значения нужно вывести в порядке возрастания ключа.


```python

def top_three_digits(s):
    if len(s) < 15:
        raise ValueError("Длина строки должна быть не менее 15 символов.")
    
    # Создаём словарь для подсчета частоты каждой цифры
    frequency = {}
    
    for char in s:
        if char.isdigit():  # убеждаемся, что символ — цифра
            digit = int(char)
            if digit in frequency:
                frequency[digit] += 1
            else:
                frequency[digit] = 1
    
    # Сортируем словарь по значениям в порядке убывания
    sorted_frequency = sorted(frequency.items(), key=lambda item: item[1], reverse=True)
    
    # Берём только три самых частых элемента
    top_three = dict(sorted_frequency[:3])
    
    # Сортируем результат по ключам в порядке возрастания
    return dict(sorted(top_three.items()))

# Пример использования функции
sequence = "235125534623812347155281123"
result = top_three_digits(sequence)

print(result)  # Вывод результата


```
### Результат.
![Меню](https://github.com/AnnaZakharevich/-/blob/main/laba%206/pic/s3.png)

## Выводы

В данном коде показана возможность присвоения значения переменной с клавиатуры
  
## Самостоятельная работа №4
### Ваш хороший друг владеет офисом со входом по электронным картам, ему нужно чтобы вы написали программу, которая показывала в каком порядке сотрудники входили и выходили из офиса. Определение сотрудника происходит по id. Напишите функцию, которая на вход принимает кортеж и случайный элемент (id), его можно придумать самостоятельно. Требуется вернуть новый кортеж, начинающийся с первого появления элемента в нем и заканчивающийся вторым его появлением включительно.
Если элемента нет вовсе - вернуть пустой кортеж.
Если элемент встречается только один раз, то вернуть кортеж, который начинается с него и идет до конца исходного.
Входные данные:
(1,2, 3), 8)
(1,8, 3, 4, 8, 8,9, 2), 8)
(1,2, 8, 5, 1, 2, 9), 8)
Ожидаемый результат:
()
(8,3, 4,8)
(8, 5, 1, 2, 9)

```python

def extract_subtuple(data, target):
    # Находим индексы первого и второго появления элемента
    first_index = -1
    second_index = -1

    for index, value in enumerate(data):
        if value == target:
            if first_index == -1:
                first_index = index
            elif second_index == -1:
                second_index = index

    # Если элемент не найден, возвращаем пустой кортеж
    if first_index == -1:
        return ()

    # Если элемент встречается только один раз, возвращаем от него до конца
    if second_index == -1:
        return data[first_index:]

    # Возвращаем подкортаж от первого до второго появления включительно
    return data[first_index:second_index + 1]

# Пример использования функции
print(extract_subtuple((1, 2, 3), 8))                     # Ожидаемый результат: ()
print(extract_subtuple((1, 8, 3, 4, 8, 8, 9, 2), 8))     # Ожидаемый результат: (8, 3, 4, 8)
print(extract_subtuple((1, 2, 8, 5, 1, 2, 9), 8))        # Ожидаемый результат: (8, 5, 1, 2, 9)


```
### Результат.
![Меню](https://github.com/AnnaZakharevich/-/blob/main/laba%206/pic/s4.png)
## Выводы

В этом коде продемонстрирована возможность исполнения математических операций над строковыми переменными
  
## Самостоятельная работа №5
### Самостоятельно придумайте и решите задачу на python, в которой будут обязательно использоваться кортеж или список. Проведите минимум три теста для проверки работоспособности вашей задачи.


```python

def get_unique_sorted_tuple(input_tuple):
    # Преобразуем кортеж в множество для удаления дубликатов
    unique_elements = set(input_tuple)
    # Сортируем уникальные элементы и возвращаем в виде кортежа
    return tuple(sorted(unique_elements))

# Примеры использования функции
print(get_unique_sorted_tuple((3, 1, 4, 4, 1, 5, 9, 2, 6)))  # Ожидаемый результат: (1, 2, 3, 4, 5, 6, 9)
print(get_unique_sorted_tuple((10, 20, 10, 30, 30, 40)))      # Ожидаемый результат: (10, 20, 30, 40)
print(get_unique_sorted_tuple((1, 1, 1, 1, 1)))               # Ожидаемый результат: (1,)




```


### Результат.
![Меню](https://github.com/AnnaZakharevich/-/blob/main/laba%206/pic/s5.png)

## Выводы

В данном коде показывается вывод коментариев совместно с переменными
  


## Общие выводы по теме
### Выполняя данную работу я вспомнила основные функции Python, синтаксис этого языка. В задачах этой работы используются простейшие операции, необходимые для присваивания значений, вывода этих значений и их изменения.
